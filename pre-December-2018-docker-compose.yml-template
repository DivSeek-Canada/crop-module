# This is a DivSeek Canada customized version of the docker-tripal
# sample configuration to run a Tripal instance with Docker-Compose
#
# This file is a template intended to be copied into an operational
# docker-compose.yml file, for crop-specific deployment customization.
# (NOTE: Please do NOT directly edit this file unless working on
#  modifications or extensions that add CORE functionality to the Portal
#  docker-compose build for all crop platforms being deployed.)
#
# (Meta)Data Persistence
# ======================
#
# NOTE: to allow the Tripal instance to store its (meta)data outside of its running containers,
# thus assuring persistence between container runs, this docker-compose.yml file configures
# a series of Docker 'named' "volumes". These are stored under the Docker installation directory.
#
# One can use the CLI command:
#
#         docker exec -i -t <container_name> /bin/bash
#
# to directly log into each container to access data attached to each volume.
#
# Later iterations of this project may add additional services to facilitate access to, and backup of, these volumes.
#
# Application Port Visibility
# ===========================
#
# We've chosen to map the web sites - core and jbrowse - to TCP/IP ports 8082 and 8084, respectively.
# These ports are currently not publicly reserved for any other software product in the world.
#
version: '3'
services:

  proxy: ## Proxy Image
    image: nginx:latest
    ports:
        - "8200:80"
    links:
        #- remoteuser
        #- apollo
        #- galaxy
        - tripal
        #- ngadmin
        #- chado_jb
        #- jbrowse
        #- jbrowse-graphql
        #- postgrest
        #- postgrest_tripal
        #- postgraphql
        #- pgadmin4
    volumes:
        - "./nginx/tripal-only-default.conf:/etc/nginx/conf.d/default.conf"

  tripal: ## Tripal
    # DivSeek Canada Portal builds a
    # derivative Docker Tripal image.
    # see project Dockerfile.
    build: ./tripal
    links:
      - tripal_db:postgres
      - elasticsearch:elasticsearch
    volumes:
      - ./volumes/tripal/html:/var/www/html/sites
      - ./volumes/tripal/private:/var/www/private
    environment:
      UPLOAD_LIMIT: 20M
      MEMORY_LIMIT: 128M
      BASE_URL: "${GMOD_SITE_BASE_URL}/tripal"
      BASE_URL_PROTO: ${GMOD_SITE_BASE_URL_PROTO}
      BASE_URL_PATH: /tripal
      DB_NAME: 'postgres'
      SITE_NAME: ${GMOD_SITE_NAME}
      ENABLE_CRON_JOBS: 1
      TRIPAL_DOWNLOAD_MODULES: "bootstrap jquery_update panels advanced_help"
      #
      # BrAPI module fails to install correctly as of commit 962ffe4 of the tripal/brapi project
      # TRIPAL_GIT_CLONE_MODULES: "https://github.com/tripal/tripal_jbrowse.git https://github.com/tripal/brapi"
      # TRIPAL_ENABLE_MODULES: "bootstrap jquery_update panels advanced_help tripal_jbrowse page_manager tracker forum brapi"
      #
      TRIPAL_GIT_CLONE_MODULES: "https://github.com/tripal/tripal_jbrowse.git"
      TRIPAL_ENABLE_MODULES: "bootstrap jquery_update panels advanced_help tripal_jbrowse page_manager tracker forum"
      THEME: "bootstrap"
    depends_on:
      - tripal_db
      - elasticsearch
      - jbrowse

  tripal_db: ## Tripal's Postgres Database
    image: quay.io/galaxy-genome-annotation/chado:1.31-jenkins97-pg9.5
    environment:
    - POSTGRES_PASSWORD=postgres
    # The default chado image would try to install the schema on first run,
    # we just want the tools to be available.
    - INSTALL_CHADO_SCHEMA=0
    - INSTALL_YEAST_DATA=0
    - PGDATA=/var/lib/postgresql/data/
    volumes:
    # External Postgresql volume mapping
    - tripal_data:/var/lib/postgresql/data/

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2
    environment:
      TAKE_FILE_OWNERSHIP: "true"
    volumes:
    # External elastic search index volume mappings
    - tripal_index:/usr/share/elasticsearch/data

  #jbrowse:
  #  image: quay.io/galaxy-genome-annotation/jbrowse
  #  ports:
  #  - "8084:80"
  #  volumes:
  #  # External jbrowse volume mapping
  #  # NOTE: This first iteration hard codes a connection to the 'example' data in the project
  #  #       We actually need to devise a more flexible data loading process here, one in which
  #  #       the JBrowse system may start out empty, but have some data loading triggered later
  #  #       either in a declarative fashion (by a configuration file) or by a web form request.
  #  - ./data/jbrowse/:/data/

volumes:
  tripal_sites:
  tripal_private:
  tripal_data:
  tripal_index:
  #tripal_jbrowse:
